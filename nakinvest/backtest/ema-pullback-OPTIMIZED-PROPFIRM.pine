//@version=5
strategy("NakInvest - EMA Pullback [PROP FIRM OPTIMIZED]", 
         overlay=true, 
         default_qty_type=strategy.percent_of_equity, 
         default_qty_value=2,  // 2% risk per trade for prop firms
         commission_type=strategy.commission.percent, 
         commission_value=0.045,
         initial_capital=10000)

// =============================================================================
// OPTIMIZED FOR PROP FIRM CHALLENGES
// =============================================================================
// This configuration is optimized for:
// - At least 1 trade every 2 days (0.5 trades/day minimum)
// - Maximum drawdown < 10%
// - Maximum daily drawdown < 5%
// - Consistent small profits
// - Works on 15-minute timeframe

// === Input Parameters (Optimized Defaults) ===

// Position Settings
enableLong = input.bool(true, "Enable Long Positions", group="Position Settings")
enableShort = input.bool(true, "Enable Short Positions", group="Position Settings")

// EMA Settings - OPTIMIZED
emaLength = input.int(9, "EMA Length", minval=1, group="EMA Settings")
ema200Length = input.int(200, "EMA200 Length", minval=1, group="EMA Settings")
showEma = input.bool(true, "Show EMA Lines", group="Visual Settings")

// Pullback Settings - OPTIMIZED FOR REAL ENTRIES
pullbackPct = input.float(0.05, "Min Pullback %", minval=0.01, step=0.01, group="Entry Settings", tooltip="Minimum pullback from EMA required for entry (0.05 = 0.05%)")
minCandleSize = input.float(0.15, "Min Candle Size %", minval=0.01, step=0.01, group="Entry Settings", tooltip="Minimum candle body size as % of price")
touchEmaWindow = input.int(3, "EMA Touch Window", minval=1, maxval=10, group="Entry Settings", tooltip="Number of bars to look back for EMA touch")

// Risk Management - CONSERVATIVE FOR PROP FIRMS
slType = input.string("Percentage", "Stop Loss Type", options=["Below Candle Wick", "Percentage", "ATR Based"], group="Risk Management")
slPercent = input.float(0.75, "Stop Loss %", minval=0.1, step=0.1, group="Risk Management", tooltip="Stop loss percentage from entry")
slBuffer = input.float(0.1, "SL Buffer %", minval=0.0, step=0.05, group="Risk Management", tooltip="Additional buffer for stop loss")
rrRatio = input.float(2.0, "Risk/Reward Ratio", minval=0.5, step=0.1, group="Risk Management")
tpType = input.string("RR-Based", "Take Profit Type", options=["RR-Based", "Percentage", "EMA Cross"], group="Risk Management")
tpPercent = input.float(1.5, "Take Profit %", minval=0.1, step=0.1, group="Risk Management")

// Filters - OPTIMIZED COMBINATION
useTrendFilter = input.bool(true, "Use Trend Filter", group="Filters", tooltip="Only trade in direction of trend (EMA9 vs EMA200)")
useVolumeFilter = input.bool(true, "Use Volume Filter", group="Filters")
minVolume = input.float(1.2, "Min Volume Multiplier", minval=0.5, step=0.1, group="Filters", tooltip="Volume must be X times the 20-period average")
useSessionFilter = input.bool(false, "Use Session Filter", group="Filters", tooltip="Disabled by default for more trading opportunities")
sessionTime = input.session("0900-1700", "Trading Session", group="Filters")

// Advanced Filters
useRsiFilter = input.bool(true, "Use RSI Filter", group="Advanced Filters")
rsiLength = input.int(14, "RSI Length", minval=1, group="Advanced Filters")
rsiOversold = input.float(35, "RSI Oversold", minval=0, maxval=50, group="Advanced Filters")
rsiOverbought = input.float(65, "RSI Overbought", minval=50, maxval=100, group="Advanced Filters")

useAtrFilter = input.bool(true, "Use ATR Filter", group="Advanced Filters", tooltip="Avoid low volatility periods")
atrLength = input.int(14, "ATR Length", minval=1, group="Advanced Filters")
minAtrPercent = input.float(0.3, "Min ATR %", minval=0.1, step=0.1, group="Advanced Filters", tooltip="Minimum ATR as % of price")

// === Calculate Indicators ===
ema9 = ta.ema(close, emaLength)
ema200 = ta.ema(close, ema200Length)
atr = ta.atr(atrLength)
rsi = ta.rsi(close, rsiLength)

// Volume
avgVolume = ta.sma(volume, 20)
volumeOk = not useVolumeFilter or volume > avgVolume * minVolume

// ATR Filter
atrPercent = (atr / close) * 100
atrOk = not useAtrFilter or atrPercent > minAtrPercent

// Session Filter
inSession = not useSessionFilter or time(timeframe.period, sessionTime)

// Trend Detection
bullishTrend = ema9 > ema200
bearishTrend = ema9 < ema200
trendOk = not useTrendFilter or (bullishTrend or bearishTrend)

// === Entry Logic ===

// Check if price touched EMA in recent bars
touchedEmaRecently(lookback) =>
    touched = false
    for i = 1 to lookback
        if low[i] <= ema9[i] and high[i] >= ema9[i]
            touched := true
    touched

// Candle Analysis
candleBody = math.abs(close - open)
candleBodyPercent = (candleBody / open) * 100
isBullishCandle = close > open
isBearishCandle = close < open

// Pullback Calculation
pullbackFromEma = math.abs(close - ema9) / ema9 * 100

// === Long Entry Conditions ===
longSetup = enableLong and isBullishCandle and candleBodyPercent >= minCandleSize and touchedEmaRecently(touchEmaWindow) and close > ema9 and pullbackFromEma >= pullbackPct and (not useTrendFilter or bullishTrend) and volumeOk and atrOk and inSession and (not useRsiFilter or rsi < rsiOverbought)

// === Short Entry Conditions ===
shortSetup = enableShort and isBearishCandle and candleBodyPercent >= minCandleSize and touchedEmaRecently(touchEmaWindow) and close < ema9 and pullbackFromEma >= pullbackPct and (not useTrendFilter or bearishTrend) and volumeOk and atrOk and inSession and (not useRsiFilter or rsi > rsiOversold)

// === Risk Management Calculations ===

// Stop Loss Calculation
longSL = slType == "Percentage" ? close * (1 - slPercent / 100) : slType == "ATR Based" ? close - (atr * 1.5) : math.min(low, low[1]) * (1 - slBuffer / 100)

shortSL = slType == "Percentage" ? close * (1 + slPercent / 100) : slType == "ATR Based" ? close + (atr * 1.5) : math.max(high, high[1]) * (1 + slBuffer / 100)

// Take Profit Calculation
longTP = tpType == "RR-Based" ? close + (close - longSL) * rrRatio : tpType == "Percentage" ? close * (1 + tpPercent / 100) : na

shortTP = tpType == "RR-Based" ? close - (shortSL - close) * rrRatio : tpType == "Percentage" ? close * (1 - tpPercent / 100) : na

// === Strategy Execution ===

// Long Entry
if longSetup
    strategy.entry("Long", strategy.long)
    if tpType != "EMA Cross"
        strategy.exit("Long Exit", "Long", stop=longSL, limit=longTP)
    else
        strategy.exit("Long SL", "Long", stop=longSL)

// Short Entry
if shortSetup
    strategy.entry("Short", strategy.short)
    if tpType != "EMA Cross"
        strategy.exit("Short Exit", "Short", stop=shortSL, limit=shortTP)
    else
        strategy.exit("Short SL", "Short", stop=shortSL)

// EMA Cross Exits
if tpType == "EMA Cross"
    if strategy.position_size > 0 and ta.crossunder(close, ema9)
        strategy.close("Long", comment="EMA Cross")
    if strategy.position_size < 0 and ta.crossover(close, ema9)
        strategy.close("Short", comment="EMA Cross")

// === Visual Elements ===

// Plot EMAs
plot(showEma ? ema9 : na, "EMA9", color=color.new(color.blue, 0), linewidth=2)
plot(showEma ? ema200 : na, "EMA200", color=color.new(color.gray, 50), linewidth=1)

// Entry Signals
plotshape(longSetup, "Long Signal", shape.triangleup, location.belowbar, color=color.new(color.green, 0), size=size.small)
plotshape(shortSetup, "Short Signal", shape.triangledown, location.abovebar, color=color.new(color.red, 0), size=size.small)

// Background Color for Trend
bgcolor(useTrendFilter and bullishTrend ? color.new(color.green, 95) : useTrendFilter and bearishTrend ? color.new(color.red, 95) : na)

// === Info Panel ===
var table infoTable = table.new(position.top_right, 2, 6)
if barstate.islast
    table.cell(infoTable, 0, 0, "Status", bgcolor=color.new(color.gray, 80))
    table.cell(infoTable, 1, 0, strategy.position_size != 0 ? "IN TRADE" : "WAITING", bgcolor=strategy.position_size != 0 ? color.new(color.yellow, 80) : color.new(color.gray, 80))
    
    table.cell(infoTable, 0, 1, "Trend", bgcolor=color.new(color.gray, 90))
    table.cell(infoTable, 1, 1, bullishTrend ? "BULLISH" : bearishTrend ? "BEARISH" : "NEUTRAL", bgcolor=color.new(color.gray, 90))
    
    table.cell(infoTable, 0, 2, "Volume", bgcolor=color.new(color.gray, 90))
    table.cell(infoTable, 1, 2, volumeOk ? "OK" : "LOW", bgcolor=volumeOk ? color.new(color.green, 90) : color.new(color.red, 90))
    
    table.cell(infoTable, 0, 3, "ATR %", bgcolor=color.new(color.gray, 90))
    table.cell(infoTable, 1, 3, str.tostring(atrPercent, "#.##") + "%", bgcolor=color.new(color.gray, 90))
    
    table.cell(infoTable, 0, 4, "RSI", bgcolor=color.new(color.gray, 90))
    table.cell(infoTable, 1, 4, str.tostring(rsi, "#.#"), bgcolor=rsi < rsiOversold ? color.new(color.green, 90) : rsi > rsiOverbought ? color.new(color.red, 90) : color.new(color.gray, 90))

// === Alerts ===
alertcondition(longSetup, "Long Entry", "EMA Pullback Long Signal {{ticker}} @ {{close}}")
alertcondition(shortSetup, "Short Entry", "EMA Pullback Short Signal {{ticker}} @ {{close}}")

// === Strategy Statistics for Optimization ===
// These values help evaluate if the strategy meets prop firm requirements
// Check Strategy Tester for:
// - Win Rate > 50%
// - Profit Factor > 1.5
// - Max Drawdown < 10%
// - Avg Trade Duration suitable for your style
// - Consistent profits over time